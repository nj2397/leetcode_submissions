#include <bits/stdc++.h>
using namespace std;


typedef struct node {

    int data;
    struct node * next;

}Node;

Node * head = nullptr;

void insertIntoList ( int ele ) {

    Node * newnode = new Node();

    newnode -> data = ele;
    newnode -> next = nullptr;

    if (head == nullptr) {
        head = newnode;
        return;
    }

    Node * temp = head;

    while (temp -> next != nullptr)
        temp = temp -> next;

    temp -> next = newnode;

    return;

}


void removeDuplicates () {

    Node * prev = head;
    Node * current = head;
    Node * temp = nullptr;

    set<int>st;

    st.insert(current->data);

    current = current -> next;

    while (current != nullptr) {
        if (st.find ( current -> data ) != st.end()) {
            prev->next = current->next;
            temp = current;
            current = current -> next;
            delete temp;
        } else {
            st.insert(current -> data);
            prev = current;
            current = current->next;
        }
    }

    return;


}


void displayList() {

    Node * temp = head;

    while (temp != nullptr) {
        cout << temp -> data << " ";
        temp = temp -> next;
    }

    return;

}


void freeList() {
    Node * temp = nullptr;

    while (head != nullptr) {
        temp = head;
        head = head -> next;
        delete temp;
    }


    return;
}



int main () {

    int n;
    cin>>n;

    for (int i=0; i<n; i++) {
        int ele;
        cin >> ele;
        insertIntoList(ele);
    }

    removeDuplicates();

    displayList();

    freeList();

    return 0;
}

