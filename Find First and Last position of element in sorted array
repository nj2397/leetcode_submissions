class Solution{
public: 
	int firstPos(vector<int>&nums, int left, int right, int k){
		while(left <= right){
			int mid = left + (right - left)/2;
			
			if(nums[mid] == k){
				if(mid == 0 || nums[mid-1] < k)
					return mid;
				
				if(nums[mid] < k)
					left = mid + 1;
				else
					right = mid - 1;
		}
		return -1;
	}
	
	int lastPos(vector<int>&nums, int left, int right, int k){
		while(left <= right){
			int mid = left + (right - left)/2;
			if(nums[mid] == k){
				if(mid == nums.size()-1 || nums[mid+1] > k)
					return mid;
			}

			if(nums[mid] > k)
				right = mid - 1;
			else
				left = mid + 1;
		}
		return -1;
	}
	
	vector<int> searchRange(vector<int>& nums, int target) {
		vector<int>finalPostions;
		int result1 = firstPos(nums, 0, nums.size()-1, target);
		int result2 = lastPos(nums, 0, nums.size()-1, target);
		
		finalPositions.push_back(result1);
		finalPositions.push_back(result2);
		
		return finalPostions;
	}
};
